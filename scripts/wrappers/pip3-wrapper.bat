@echo off
setlocal

:: Determine if we're running as pip or pip3 based on the script name
set "SCRIPT_NAME=%~nx0"
if "%SCRIPT_NAME%"=="pip.bat" (
    set "ORIG_NAME=pip-orig.exe"
) else (
    set "ORIG_NAME=pip3-orig.exe"
)

:: The original command is renamed to pip-orig or pip3-orig in the same directory
set "SCRIPT_DIR=%~dp0"
set "PIP=%SCRIPT_DIR%%ORIG_NAME%"

:: If the original doesn't exist, search PATH as a fallback
if not exist "%PIP%" (
    for /f "delims=" %%i in ('where %SCRIPT_NAME%') do (
        set "PIP=%%i"
        if not "%%i"=="%~f0" (
            goto :found_pip
        )
    )
)
:found_pip

if not exist "%PIP%" (
    echo Error: %SCRIPT_NAME% not found. Ensure %SCRIPT_NAME% is installed. >&2
    exit /b 1
)

:: Run the original command
call "%PIP%" %*
set EXIT_CODE=%ERRORLEVEL%

:: Sync requirements if install or uninstall
if %EXIT_CODE% equ 0 (
    if "%1"=="install" (
        goto :sync
    )
    if "%1"=="uninstall" (
        goto :sync
    )
    goto :end
)

:sync
:: Ensure requirements.txt exists
set REQ_FILE=requirements.txt
if not exist "%REQ_FILE%" (
    echo # Auto-generated by areq on %DATE% %TIME% > "%REQ_FILE%"
)

:: Get installed packages using the original command
for /f "delims=" %%i in ('%PIP% list --format=freeze ^| findstr /v "^-e" ^| findstr /v "^#" ^| findstr /v "git+" ^| findstr /v "http"') do (
    set "PACKAGE=%%i"
    echo !PACKAGE! >> temp_requirements.txt
)

:: Sort packages and write to requirements.txt
echo # Auto-generated by areq on %DATE% %TIME% > "%REQ_FILE%"
sort temp_requirements.txt >> "%REQ_FILE%"
del temp_requirements.txt

:end
exit /b %EXIT_CODE%
