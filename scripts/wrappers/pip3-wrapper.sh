#!/bin/bash

# determine if we're running as pip or pip3 based on the script name
SCRIPT_NAME=$(basename "$0")
if [ "$SCRIPT_NAME" = "pip" ]; then
    ORIG_NAME="pip-orig"
else
    ORIG_NAME="pip3-orig"

SCRIPT_DIR="$(dirname "$0")"
PIP="$SCRIPT_DIR/$ORIG_NAME"

# If the original doesn't exist, search PATH as a fallback
if [ ! -x "$PIP" ]; then
    for path in $(echo "$PATH" | tr ':' '\n'); do
        candidate="$path/$SCRIPT_NAME"
        if [ -x "$candidate" ] && [ "$candidate" != "$0" ]; then
            PIP="$candidate"
            break
        fi
    done
fi


if [ ! -x "$PIP" ]; then
    echo "Error: $SCRIPT_NAME not found. Ensure $SCRIPT_NAME is installed." >&2
    exit 1
fi

# Run the original command
"$PIP" "$@"
EXIT_CODE=$?

# sync requirements if install or uninstall
if [ $EXIT_CODE -eq 0 ]; then
    if [[ "$1" == "install" || "$1" == "uninstall" ]]; then
        # ensure requirements.txt exists
        REQ_FILE="requirements.txt"
        if [ ! -f "$REQ_FILE" ]; then
            mkdir -p "$(dirname "$REQ_FILE")"
            echo "# Auto-generated by areq on $(date)" > "$REQ_FILE"
        fi

        # get installed packages using the original command
        PACKAGES=$("$PIP" list --format=freeze | grep -v '^\-e' | grep -v '^#' | grep -v 'git\+' | grep -v 'http' | sort)

        # Write to requirements.txt
        echo "# Auto-generated by areq on $(date)" > "$REQ_FILE"
        echo "$PACKAGES" >> "$REQ_FILE"
    fi
fi

exit $EXIT_CODE
