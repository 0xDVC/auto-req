import site
import shutil
import subprocess
import os
import sys
from setuptools import setup, find_packages
from setuptools.command.install import install


# lot's of skill issues here, but a great learning experience
class AutoReq(install):
    def run(self):
        install.run(self)

        # check if we're in a virtual env
        if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
            wrapper_dir = os.path.join(sys.prefix, 'bin' if sys.platform in ('linux', 'darwin') else 'Scripts')
        else:
            wrapper_dir = os.path.expanduser('~/.local/bin') if sys.platform in ('linux', 'darwin') else os.path.join(site.getuserbase(), "Scripts")

        # use the right wrapper based on the OS
        wrapper_template = "areq-pip3-wrapper.sh" if sys.platform in ('linux', 'darwin') else 'areq-pip3-wrapper.bat'
        wrapper_ext = "" if sys.platform in ('linux', 'darwin') else ".bat"

        # check if the wrapper directory exists
        # weird but i run into a non existent directory error
        if not os.path.exists(wrapper_dir):
            print(f"Creating wrapper directory: {wrapper_dir}")
            os.makedirs(wrapper_dir)

        # trying to be fancy here
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "--version"])
            print("Pip is already available.")
        except subprocess.CalledProcessError:
            try:
                subprocess.check_call([sys.executable, "-m", "ensurepip"])
                subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
                print("Ensured pip is installed and upgraded.")
            except subprocess.CalledProcessError as e:
                print(f"Warning: Could not ensure pip: {e}. Proceeding anyway.")

        # find the wrapper template
        try:
            import scripts.wrappers
            template_path = os.path.join(os.path.dirname(scripts.wrappers.__file__), wrapper_template)
            print(f"Found wrapper template at: {template_path}")
        except ImportError as e:
            print(f"Error: Could not import scripts.wrappers: {e}")
            sys.exit(1)

        with open(template_path) as f:
            content = f.read()

        # set up wrappers for pip and pip3
        for cmd in ['pip', 'pip3']:
            wrapper_path = os.path.join(wrapper_dir, f"{cmd}{wrapper_ext}")
            orig_cmd_path = os.path.join(wrapper_dir, f"{cmd}-orig{wrapper_ext}")

            if not os.path.exists(wrapper_path):
                print(f"{cmd} not found at {wrapper_path}. Creating a minimal {cmd} script.")
                if sys.platform in ('linux', 'darwin'):
                    with open(wrapper_path, "w") as f:
                        f.write("#!/bin/bash\n")
                        f.write(f"exec {wrapper_dir}/pip \"$@\"\n")
                    os.chmod(wrapper_path, 0o755)
                else:
                    with open(wrapper_path, "w") as f:
                        f.write(f"@echo off\n")
                        f.write(f"call {wrapper_dir}\\pip %*\n")

            if os.path.exists(wrapper_path) and not os.path.exists(orig_cmd_path):
                print(f"Renaming {wrapper_path} to {orig_cmd_path}")
                shutil.move(wrapper_path, orig_cmd_path)

            with open(wrapper_path, "w") as f:
                f.write(content)
            print(f"Wrote wrapper to: {wrapper_path}")

            if sys.platform in ('linux', 'darwin'):
                os.chmod(wrapper_path, 0o755)
            print(f"Installed {cmd} wrapper at {wrapper_path}")

        # generate the requirements.txt
        try:
            req_file = os.path.join(os.getcwd(), "requirements.txt")
            if not os.path.exists(req_file):
                with open(req_file, "w") as f:
                    f.write(f"# Auto-generated by areq on {os.popen('date').read().strip()}\n")
            packages = subprocess.check_output(
                [sys.executable, "-m", "pip", "list", "--format=freeze"],
                text=True
            ).splitlines()
            packages = [pkg for pkg in packages if not pkg.startswith(("-e", "#")) and "git+" not in pkg and "http" not in pkg]
            packages.sort()
            with open(req_file, "w") as f:
                f.write(f"# Auto-generated by areq on {os.popen('date').read().strip()}\n")
                for pkg in packages:
                    f.write(f"{pkg}\n")
            print(f"Generated {req_file} with current environment packages.")
        except Exception as e:
            print(f"Warning: Could not generate requirements.txt: {e}")

setup(
    name="areq",
    version="0.1.0beta",
    description="Lightweight tool to auto manage requirements.txt by intercepting pip commands",
    author="0xdvc",
    author_email="neilohene@gmail.com",
    url="https://github.com/0xdvc/auto-req",
    packages=find_packages(),
    package_data={'scripts.wrappers': ['areq-pip3-wrapper.sh', 'areq-pip3-wrapper.bat']},
    python_requires=">=3.6",
    cmdclass={'install': AutoReq}
)
