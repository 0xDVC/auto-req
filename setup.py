import os
import sys
import site
import shutil
import subprocess
from setuptools import setup, find_packages
from setuptools.command.install import install

class AutoReq(install):
    def run(self):
        install.run(self)

        if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
            wrapper_dir = os.path.join(sys.prefix, 'bin' if sys.platform in ('linux', 'darwin') else 'Scripts')
        else:
            wrapper_dir = os.path.expanduser('~/.local/bin') if sys.platform in ('linux', 'darwin') else os.path.join(site.getuserbase(), 'Scripts')

        os.makedirs(wrapper_dir, exist_ok=True)

        wrapper_template = "pip3-wrapper.sh" if sys.platform in ('linux', 'darwin') else "pip3-wrapper.bat"
        wrapper_ext = "" if sys.platform in ('linux', 'darwin') else ".bat"
        base_path = os.path.dirname(os.path.abspath(__file__))
        template_path = os.path.join(base_path, 'scripts', 'wrappers', wrapper_template)
        if not os.path.exists(template_path):
            print(f"Error: Wrapper template not found at {template_path}")
            sys.exit(1)
        with open(template_path) as f:
            content = f.read()

        for cmd in ['pip', 'pip3']:
            wrapper_path = os.path.join(wrapper_dir, f"{cmd}{wrapper_ext}")
            orig_cmd_path = os.path.join(wrapper_dir, f"{cmd}-orig{wrapper_ext}")

            if os.path.exists(wrapper_path):
                with open(wrapper_path) as f:
                    existing_content = f.read()
                if existing_content == content:
                    print(f"Skipping {cmd} wrapper - already installed at {wrapper_path}")
                    continue

            if os.path.exists(wrapper_path) and not os.path.exists(orig_cmd_path):
                shutil.move(wrapper_path, orig_cmd_path)
                print(f"Renamed {wrapper_path} to {orig_cmd_path}")

            with open(wrapper_path, 'w') as f:
                f.write(content)
            if sys.platform in ('linux', 'darwin'):
                os.chmod(wrapper_path, 0o755)
            print(f"Installed {cmd} wrapper at {wrapper_path}")

        self.update_requirements()

    def update_requirements(self):
        try:
            req_file = os.path.join(os.getcwd(), "requirements.txt")
            if not os.path.exists(req_file):
                with open(req_file, "w") as f:
                    f.write("# Auto-generated by areq\n")
            packages = subprocess.check_output(
                [sys.executable, "-m", "pip", "list", "--format=freeze"],
                text=True
            ).splitlines()
            packages = [pkg for pkg in packages if not pkg.startswith(("-e", "#")) and "git+" not in pkg]
            packages.sort()
            with open(req_file, "w") as f:
                f.write("# Auto-generated by areq\n")
                for pkg in packages:
                    f.write(f"{pkg}\n")
            print(f"Generated {req_file}")
        except Exception as e:
            print(f"Warning: Could not generate requirements.txt: {e}")

setup(
    name="areq",
    version="0.1.0",
    description="A tool to auto manage requirements.txt by intercepting pip commands",
    author="Your Name",
    author_email="your.email@example.com",
    url="https://github.com/0xdvc/auto-req",
    packages=find_packages(),
    package_data={
        '': ['scripts/wrappers/pip3-wrapper.sh', 'scripts/wrappers/pip3-wrapper.bat']
    },
    python_requires=">=3.6",
    cmdclass={'install': AutoReq}
)
